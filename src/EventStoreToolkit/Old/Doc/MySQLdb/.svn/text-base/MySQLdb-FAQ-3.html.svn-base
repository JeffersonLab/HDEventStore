<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
 <META NAME="GENERATOR" CONTENT="SGML-Tools 1.0.9">
 <TITLE>MySQLdb FAQ: Using MySQLdb</TITLE>
 <LINK HREF="MySQLdb-FAQ-2.html" REL=previous>
 <LINK HREF="MySQLdb-FAQ.html#toc3" REL=contents>
</HEAD>
<BODY>
Next
<A HREF="MySQLdb-FAQ-2.html">Previous</A>
<A HREF="MySQLdb-FAQ.html#toc3">Contents</A>
<HR>
<H2><A NAME="s3">3. Using MySQLdb</A></H2>

<P>MySQLdb is a
<A HREF="http://www.python.org/topics/database/DatabaseAPI-2.0.html">Python Database API Specification 2.0</A> database module, so you
should be familiar with the spec. Deviations from the spec are documented in the
<A HREF="http://dustman.net/andy/python/MySQLdb/doc/MySQLdb.html">MySQLdb documentation</A>.
<P>
<H2><A NAME="ss3.1">3.1 cursor.rollback() always fails!</A>
</H2>

<P>MySQLdb now supports transactions if the server supports
transaction-safe tables (TSTs) and you are using them.  If your server
doesn't support them, rollbacks will always fail, as they should,
because it can't do what you asked.  Even if your server does support
them, rollbacks will fail if you modified any non-TST tables.
<P>
<P>OTOH, <CODE>cursor.commit()</CODE>, which attempts to commit the
transaction to the database, <EM>always</EM> succeeds, because MySQL
essentially is always in auto-commit mode (unless you told it
otherwise).
<P>
<H2><A NAME="ss3.2">3.2 How do I use some of the special MySQL features?</A>
</H2>

<P>First answer: Don't, if you can avoid it. Your program will not be
portable to other databases.
<P>
<P>Second answer: Nearly all the special API calls are implemented on
the _mysql connection object, and the MySQLdb connection object can
also invoke them. See the built-in module docs to find out what ones
are implemented, and the MySQL C API docs to see what they do.
<P>
<H2><A NAME="ss3.3">3.3 I still wanna use _mysql directly.</A>
</H2>

<P>Well, it <CODE>may</CODE> be appropriate in some cirumstances.  ZMySQLDA
does this, because Zope's ZRDB module is an API in itself, and too
many layers of APIs tend to make a mess of things. Besides, it was
actually pretty easy to do it that way and it probably improves the
performance a bit.
<OL>
<LI>Read the MySQL docs, particularly the C API, for an overview.</LI>
<LI>Read the MySQLdb docs. This shows how the C API is transliterated
into Python. Plus some examplesa are in there.</LI>
<LI>Read the MySQLdb sources, particularly MySQLdb/cursors.py. That one
file contains most of the gory details, particularly in the
execute and _query methods.</LI>
</OL>
<HR>
Next
<A HREF="MySQLdb-FAQ-2.html">Previous</A>
<A HREF="MySQLdb-FAQ.html#toc3">Contents</A>
</BODY>
</HTML>
